{
  "communication_nodes": {
    "email_notification": {
      "name": "Email Notification Template",
      "description": "Standard email notification with template formatting",
      "category": "communication",
      "node": {
        "parameters": {
          "fromEmail": "noreply@company.com",
          "toEmail": "{{ $json.recipient_email || 'admin@company.com' }}",
          "subject": "{{ $json.email_subject || 'Workflow Notification' }}",
          "message": "Dear {{ $json.recipient_name || 'User' }},\\n\\n{{ $json.email_body || 'This is a notification from your n8n workflow.' }}\\n\\nDetails:\\n{{ Object.entries($json.details || {}).map(([key, value]) => `${key}: ${value}`).join('\\n') }}\\n\\nBest regards,\\nAutomation System\\n\\nTimestamp: {{ new Date().toISOString() }}",
          "options": {
            "allowUnauthorizedCerts": false,
            "replyTo": "noreply@company.com"
          }
        },
        "type": "n8n-nodes-base.emailSend",
        "typeVersion": 2,
        "credentials": {
          "smtp": {
            "id": "smtp-main",
            "name": "Main SMTP"
          }
        },
        "notes": "Configure SMTP credentials and customize email template"
      }
    },
    "slack_notification": {
      "name": "Slack Channel Notification",
      "description": "Send formatted message to Slack channel with attachments",
      "category": "communication",
      "node": {
        "parameters": {
          "resource": "message",
          "operation": "post",
          "channel": "{{ $json.slack_channel || '#general' }}",
          "text": "{{ $json.message || 'Workflow notification' }}",
          "attachments": [
            {
              "color": "{{ $json.alert_level === 'error' ? 'danger' : ($json.alert_level === 'warning' ? 'warning' : 'good') }}",
              "fields": [
                {
                  "title": "Workflow",
                  "value": "{{ $workflow.name }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "{{ $json.status || 'completed' }}",
                  "short": true
                },
                {
                  "title": "Timestamp",
                  "value": "{{ new Date().toISOString() }}",
                  "short": true
                }
              ]
            }
          ],
          "otherOptions": {
            "includeLinkToWorkflow": true
          }
        },
        "type": "n8n-nodes-base.slack",
        "typeVersion": 2,
        "credentials": {
          "slackApi": {
            "id": "slack-main",
            "name": "Main Slack Workspace"
          }
        },
        "notes": "Configure Slack workspace credentials and customize message format"
      }
    },
    "teams_notification": {
      "name": "Microsoft Teams Notification",
      "description": "Send adaptive card notification to Teams channel",
      "category": "communication",
      "node": {
        "parameters": {
          "resource": "message",
          "operation": "post",
          "teamId": "{{ $json.team_id }}",
          "channelId": "{{ $json.channel_id }}",
          "messageType": "message",
          "message": {
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "type": "AdaptiveCard",
                  "version": "1.3",
                  "body": [
                    {
                      "type": "TextBlock",
                      "text": "{{ $json.title || 'Workflow Notification' }}",
                      "weight": "Bolder",
                      "size": "Medium"
                    },
                    {
                      "type": "TextBlock",
                      "text": "{{ $json.message || 'Workflow completed successfully' }}",
                      "wrap": true
                    },
                    {
                      "type": "FactSet",
                      "facts": [
                        {
                          "title": "Workflow:",
                          "value": "{{ $workflow.name }}"
                        },
                        {
                          "title": "Status:",
                          "value": "{{ $json.status || 'completed' }}"
                        },
                        {
                          "title": "Timestamp:",
                          "value": "{{ new Date().toISOString() }}"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "type": "n8n-nodes-base.microsoftTeams",
        "typeVersion": 2,
        "credentials": {
          "microsoftTeamsOAuth2Api": {
            "id": "teams-main",
            "name": "Main Teams App"
          }
        },
        "notes": "Configure Teams app credentials and customize adaptive card layout"
      }
    },
    "discord_webhook": {
      "name": "Discord Webhook Notification",
      "description": "Send rich embed notification to Discord channel via webhook",
      "category": "communication",
      "node": {
        "parameters": {
          "url": "{{ $json.discord_webhook_url }}",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonParameters": true,
          "bodyParametersJson": {
            "username": "{{ $json.bot_name || 'n8n Workflow' }}",
            "avatar_url": "{{ $json.avatar_url || '' }}",
            "embeds": [
              {
                "title": "{{ $json.title || 'Workflow Notification' }}",
                "description": "{{ $json.message || 'Workflow completed successfully' }}",
                "color": "{{ $json.alert_level === 'error' ? 15158332 : ($json.alert_level === 'warning' ? 16776960 : 3066993) }}",
                "fields": [
                  {
                    "name": "Workflow",
                    "value": "{{ $workflow.name }}",
                    "inline": true
                  },
                  {
                    "name": "Status",
                    "value": "{{ $json.status || 'completed' }}",
                    "inline": true
                  },
                  {
                    "name": "Timestamp",
                    "value": "{{ new Date().toISOString() }}",
                    "inline": true
                  }
                ],
                "timestamp": "{{ new Date().toISOString() }}"
              }
            ]
          }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "notes": "Set discord_webhook_url in input data"
      }
    },
    "sms_notification": {
      "name": "SMS Notification via Twilio",
      "description": "Send SMS notification using Twilio service",
      "category": "communication",
      "node": {
        "parameters": {
          "resource": "sms",
          "operation": "send",
          "from": "{{ $json.from_number }}",
          "to": "{{ $json.to_number }}",
          "message": "{{ $json.sms_message || 'Workflow notification from ' + $workflow.name + ' at ' + new Date().toLocaleString() }}"
        },
        "type": "n8n-nodes-base.twilio",
        "typeVersion": 2,
        "credentials": {
          "twilioApi": {
            "id": "twilio-main",
            "name": "Main Twilio Account"
          }
        },
        "notes": "Configure Twilio credentials and verify phone numbers"
      }
    },
    "webhook_notification": {
      "name": "Generic Webhook Notification",
      "description": "Send notification to generic webhook endpoint",
      "category": "communication",
      "node": {
        "parameters": {
          "url": "{{ $json.webhook_url }}",
          "method": "POST",
          "authentication": "{{ $json.auth_type || 'none' }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "User-Agent",
                "value": "n8n-workflow/1.0"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonParameters": true,
          "bodyParametersJson": {
            "event": "workflow_notification",
            "workflow_id": "{{ $workflow.id }}",
            "workflow_name": "{{ $workflow.name }}",
            "execution_id": "{{ $execution.id }}",
            "timestamp": "{{ new Date().toISOString() }}",
            "status": "{{ $json.status || 'completed' }}",
            "message": "{{ $json.message || 'Workflow notification' }}",
            "data": "{{ $json.notification_data || {} }}"
          },
          "options": {
            "timeout": 10000,
            "retry": {
              "enabled": true,
              "maxTries": 3,
              "waitBetweenTries": 1000
            }
          }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "notes": "Configure webhook_url and auth_type in input data"
      }
    },
    "email_alert": {
      "name": "Critical Alert Email",
      "description": "High-priority email alert for critical issues",
      "category": "communication",
      "node": {
        "parameters": {
          "fromEmail": "alerts@company.com",
          "toEmail": "{{ $json.alert_recipients || 'oncall@company.com' }}",
          "subject": "ðŸš¨ CRITICAL ALERT: {{ $json.alert_title || 'Workflow Issue' }}",
          "message": "CRITICAL ALERT\\n\\nWorkflow: {{ $workflow.name }}\\nExecution ID: {{ $execution.id }}\\nTimestamp: {{ new Date().toISOString() }}\\n\\nIssue: {{ $json.alert_message }}\\n\\nSeverity: {{ $json.severity || 'HIGH' }}\\n\\nAction Required: {{ $json.action_required || 'Immediate investigation needed' }}\\n\\nDetails:\\n{{ JSON.stringify($json.error_details || {}, null, 2) }}\\n\\n--- End Alert ---",
          "options": {
            "allowUnauthorizedCerts": false,
            "replyTo": "alerts@company.com",
            "priority": "high"
          }
        },
        "type": "n8n-nodes-base.emailSend",
        "typeVersion": 2,
        "credentials": {
          "smtp": {
            "id": "smtp-alerts",
            "name": "Alert SMTP"
          }
        },
        "notes": "Use for critical system alerts requiring immediate attention"
      }
    }
  },
  "usage_guidelines": {
    "notification_strategy": {
      "email": "Use for detailed notifications, reports, and non-urgent alerts",
      "slack": "Use for team collaboration and real-time workflow status updates",
      "teams": "Use in Microsoft-centric environments for rich formatted notifications",
      "discord": "Use for developer communities and informal team communication",
      "sms": "Use for critical alerts requiring immediate attention",
      "webhook": "Use for system-to-system notifications and custom integrations"
    },
    "message_formatting": {
      "templates": "Create consistent message templates across communication channels",
      "variables": "Use workflow variables for dynamic content insertion",
      "formatting": "Leverage platform-specific formatting (Markdown, HTML, rich cards)",
      "attachments": "Include relevant data as attachments or embedded fields"
    },
    "error_handling": {
      "delivery_failures": "Implement fallback notification methods for critical alerts",
      "rate_limiting": "Respect platform rate limits to avoid service disruption",
      "authentication": "Handle credential expiration and refresh tokens",
      "retry_logic": "Configure appropriate retry mechanisms for failed deliveries"
    },
    "security": {
      "credentials": "Use secure credential storage for all communication services",
      "data_sensitivity": "Avoid including sensitive data in notification messages",
      "webhook_validation": "Validate webhook URLs and implement signature verification",
      "access_control": "Limit notification access based on user roles and permissions"
    },
    "performance": {
      "batching": "Batch multiple notifications when possible to reduce API calls",
      "async_processing": "Use asynchronous notification sending for better workflow performance",
      "queue_management": "Implement queuing for high-volume notification scenarios",
      "monitoring": "Monitor notification delivery success rates and performance metrics"
    }
  }
}