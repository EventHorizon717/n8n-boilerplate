{
    "name": "Edit Fields (Set) - Advanced",
    "description": "Advanced field manipulation with version management and multiple execution modes",
    "category": "processing",
    "service": "core",
    "node": {
        "parameters": {
            "mode": "manual",
            "duplicateItem": false,
            "includeOtherFields": true,
            "include": "selected",
            "includeFields": "{{ $json.fields_to_include || 'id,name,email' }}",
            "fields": {
                "values": [
                    {
                        "name": "processed_at",
                        "type": "string",
                        "value": "={{ new Date().toISOString() }}"
                    },
                    {
                        "name": "full_name",
                        "type": "string",
                        "value": "={{ ($json.first_name || '') + ' ' + ($json.last_name || '') }}"
                    },
                    {
                        "name": "email_domain",
                        "type": "string",
                        "value": "={{ $json.email && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test($json.email) ? $json.email.split('@')[1] : '' }}"
                    },
                    {
                        "name": "workflow_context",
                        "type": "object",
                        "value": "={{ { workflow_id: $workflow.id, workflow_name: $workflow.name, execution_id: $execution.id, processed_by: 'n8n' } }}"
                    },
                    {
                        "name": "data_quality_score",
                        "type": "number",
                        "value": "={{ ($json.name ? 25 : 0) + ($json.email && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test($json.email) ? 25 : 0) + ($json.phone ? 25 : 0) + ($json.address ? 25 : 0) }}"
                    }
                ]
            },
            "options": {
                "dotNotation": true,
                "ignoreConversionErrors": false,
                "stripBinary": true
            }
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "notes": "Advanced field manipulation with data quality scoring and validation"
    },
    "production_patterns": {
        "version_management": {
            "current_version": "3.4",
            "supported_versions": [
                3.0,
                3.1,
                3.2,
                3.3,
                3.4
            ],
            "version_differences": "Each version adds features like binary handling, field inclusion control, and performance optimizations"
        },
        "execution_modes": {
            "manual_mode": {
                "use_case": "Field-by-field transformation with precise control",
                "benefits": "Readable, maintainable, isolated error handling",
                "pattern": "assignments array with name/type/value objects"
            },
            "raw_mode": {
                "use_case": "Complete data restructuring using JavaScript expressions",
                "benefits": "Maximum flexibility, complex transformations",
                "pattern": "jsonOutput with single JavaScript expression"
            }
        },
        "field_manipulation": {
            "type_conversion": "Automatic type conversion with error handling",
            "dot_notation": "Deep nested object manipulation (user.profile.name)",
            "conditional_logic": "Ternary operators, null coalescing, complex expressions",
            "data_validation": "Built-in patterns for email, phone, URL, date validation"
        },
        "binary_data_handling": {
            "metadata_extraction": "File information without modifying binary content",
            "presence_detection": "Identify items with attached binary data",
            "strip_control": "Option to include or exclude binary data in output"
        },
        "error_resilience": {
            "graceful_degradation": "Continue processing when individual fields fail",
            "fallback_values": "Default values for missing or invalid data",
            "type_safety": "Runtime type checking and safe conversion",
            "error_isolation": "Manual mode isolates failures to specific fields"
        }
    },
    "implementation_template": {
        "manual_mode_pattern": {
            "basic_transformation": "{{ $json.source_field }}",
            "computed_field": "{{ ($json.first_name || '') + ' ' + ($json.last_name || '') }}",
            "conditional_field": "{{ $json.email && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test($json.email) ? $json.email : '' }}",
            "workflow_metadata": "{{ { workflow_id: $workflow.id, execution_id: $execution.id } }}",
            "data_quality": "{{ ($json.name ? 1 : 0) + ($json.email ? 1 : 0) }}"
        },
        "raw_mode_pattern": {
            "complete_restructure": "={{ { id: $json.id, profile: { name: $json.name, contact: { email: $json.email, phone: $json.phone } }, metadata: { processed_at: new Date().toISOString() } } }}",
            "array_transformation": "={{ $json.items.map(item => ({ ...item, processed: true })) }}",
            "filtering_pattern": "={{ Object.fromEntries(Object.entries($json).filter(([key, value]) => value !== null && value !== '')) }}"
        },
        "validation_expressions": {
            "email_validation": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
            "phone_validation": "/^[\\+]?[1-9][\\d]{0,15}$/",
            "url_validation": "/^https?:\\/\\/.+/",
            "date_validation": "!isNaN(Date.parse($json.date_field))"
        }
    },
    "usage_guidelines": {
        "mode_selection": [
            "Use Manual Mode for: Simple field transformations, readable workflows, team collaboration",
            "Use Raw Mode for: Complex restructuring, performance-critical operations, advanced JavaScript logic"
        ],
        "field_inclusion_strategy": [
            "includeOtherFields: true - Preserve existing data structure",
            "include: 'selected' - Explicitly control which fields to include",
            "include: 'except' - Exclude specific fields while keeping others",
            "include: 'all' - Include all input fields plus transformations"
        ],
        "performance_optimization": [
            "Use field filtering to reduce output size",
            "Enable stripBinary for large datasets without file attachments",
            "Use dot notation for nested object updates without full restructuring",
            "Batch similar transformations in single Set node rather than chaining"
        ],
        "data_quality_patterns": [
            "Always include data validation expressions for critical fields",
            "Use fallback values to handle missing or null data gracefully",
            "Add data quality scoring for downstream processing decisions",
            "Include workflow metadata for data lineage and debugging"
        ],
        "error_handling": [
            "Set ignoreConversionErrors: true for resilient processing",
            "Use try/catch patterns in raw mode expressions",
            "Provide meaningful default values for failed transformations",
            "Log transformation errors with workflow context"
        ],
        "best_practices": [
            "Document complex expressions in node notes",
            "Use descriptive field names that indicate transformation logic",
            "Test expressions with edge cases (null, empty, malformed data)",
            "Version control expression changes for complex transformations"
        ]
    }
}
