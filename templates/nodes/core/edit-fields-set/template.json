{
    "name": "Edit Fields (Set)",
    "description": "Modify, add, or remove item fields with dual-mode operation and version management",
    "category": "core",
    "service": "core",
    "typeVersion": "3.4",
    "versions": [
        "3.0",
        "3.1",
        "3.2",
        "3.3",
        "3.4"
    ],
    "node": {
        "parameters": {
            "mode": "manual",
            "duplicateItem": false,
            "duplicateCount": 0,
            "includeOtherFields": true,
            "include": "all",
            "includeFields": "",
            "excludeFields": "",
            "fields": {
                "values": [
                    {
                        "name": "processed_at",
                        "type": "string",
                        "value": "={{ new Date().toISOString() }}"
                    },
                    {
                        "name": "full_name",
                        "type": "string",
                        "value": "={{ ($json.first_name || '') + ' ' + ($json.last_name || '') }}"
                    },
                    {
                        "name": "email_validated",
                        "type": "boolean",
                        "value": "={{ $json.email && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test($json.email) }}"
                    },
                    {
                        "name": "workflow_context",
                        "type": "object",
                        "value": "={{ { workflow_id: $workflow.id, execution_id: $execution.id, processed_by: 'n8n' } }}"
                    }
                ]
            },
            "jsonOutput": "",
            "options": {
                "dotNotation": true,
                "ignoreConversionErrors": false,
                "stripBinary": true,
                "includeBinary": true
            }
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "notes": "Field manipulation with dual-mode operation support"
    },
    "patterns": {
        "dual_mode_operation": {
            "manual_mode": {
                "description": "Field-by-field transformation with individual control",
                "use_case": "Simple transformations, readable workflows, team collaboration",
                "structure": "fields.values array with name/type/value objects"
            },
            "raw_mode": {
                "description": "Complete data restructuring using JavaScript expressions",
                "use_case": "Complex transformations, performance-critical operations",
                "structure": "jsonOutput with single JavaScript expression"
            }
        },
        "version_management": {
            "conditional_parameters": "Different parameters available based on typeVersion",
            "backward_compatibility": "Legacy version support with feature detection",
            "parameter_evolution": "includeOtherFields vs include parameter patterns"
        },
        "field_inclusion_control": {
            "all_fields": "Include all input fields plus transformations",
            "selected_fields": "Explicitly control which fields to include",
            "exclude_fields": "Exclude specific fields while keeping others",
            "none_fields": "Include only transformed fields"
        },
        "data_type_handling": {
            "automatic_conversion": "Built-in type conversion with error handling",
            "type_safety": "Runtime type checking and validation",
            "error_resilience": "Graceful handling of conversion failures"
        }
    },
    "implementation": {
        "mode_switching": {
            "parameter": "mode",
            "values": [
                "manual",
                "raw"
            ],
            "conditional_logic": "Different execution paths based on mode selection"
        },
        "field_processing": {
            "manual_fields": "Process fields.values array with individual transformations",
            "raw_output": "Single jsonOutput expression for complete restructuring",
            "expression_evaluation": "Support for n8n expression syntax with workflow context"
        },
        "error_handling": {
            "conversion_errors": "ignoreConversionErrors option for fault tolerance",
            "validation_failures": "Fallback values and default handling",
            "expression_errors": "Try/catch patterns in raw mode expressions"
        },
        "performance_optimization": {
            "binary_handling": "stripBinary option for large dataset processing",
            "field_filtering": "Selective field inclusion to reduce output size",
            "batch_processing": "Process multiple items efficiently"
        }
    },
    "usage": {
        "common_patterns": {
            "field_concatenation": "={{ ($json.first_name || '') + ' ' + ($json.last_name || '') }}",
            "conditional_assignment": "={{ $json.email && /regex/.test($json.email) ? $json.email : '' }}",
            "workflow_metadata": "={{ { workflow_id: $workflow.id, execution_id: $execution.id } }}",
            "data_validation": "={{ $json.field ? $json.field : 'default_value' }}",
            "nested_object_creation": "={{ { user: { profile: $json.profile }, metadata: $json.meta } }}"
        },
        "advanced_expressions": {
            "array_processing": "={{ $json.items.map(item => ({ ...item, processed: true })) }}",
            "object_filtering": "={{ Object.fromEntries(Object.entries($json).filter(([k,v]) => v !== null)) }}",
            "date_manipulation": "={{ new Date($json.date).toISOString().split('T')[0] }}",
            "mathematical_operations": "={{ ($json.price * (1 + $json.tax_rate)).toFixed(2) }}"
        },
        "validation_patterns": {
            "email_validation": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
            "phone_validation": "/^[\\+]?[1-9][\\d]{0,15}$/",
            "url_validation": "/^https?:\\/\\/.+/",
            "date_validation": "!isNaN(Date.parse($json.date_field))"
        }
    }
}
